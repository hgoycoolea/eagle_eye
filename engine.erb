#!/usr/bin/env ruby

require 'nokogiri'
require 'mechanize'
require 'mysql2'
require 'waitutil'
require 'colorize'
# ################################## #
#                                    #
# FbScrapper                         #
#                                    #
# This module is ment to manage the  #
# scrapping of facebook and login    #
# to facebook.                       #
#                                    #
# @author : Hector Goycoolea         #
# @fecha  : 19.Mayo.2017             #
# ################################## #
module FbScrapper
# client global variable
@@client = Mysql2::Client.new(:host => "localhost", :username => "develop", :database => 'crawler',:password=>'periquito123')
# ###############################
#
# login to facebook (vanity)
#
# This method allows the facebook
# Login via POST into the mobile
# Version of facebook.
# ################################
def login_fb username, password, vanity
# exception management
begin
# puts starting
puts "starting processing vanity [" + vanity + "]"
# agent mechanize
agent = Mechanize.new
# agent alias, this replaces the user_agent
agent.user_agent_alias = 'Android'
# login page dump for the facebook mobile form
page = agent.get('http://www.alexa.com/topsites/countries/SA')

puts page.title
page.links.each do |link|
puts link.text
puts link.href
end
# go to the click action
page = link.click
# query to insert into the database
@@client.query("INSERT INTO `crawler`.`fb_json_friends` (`avatar_id`, `usuario`, `json_dump`) VALUES('"+ vanity + "','"+ username + "','" + page.body + "');", :async => true)
end
rescue Exception => e
# puts the exception
puts e.message
# backtrace to inspect
#puts e.backtrace.inspect
# information to the error of the thread
#puts "error on thread"
end
end
# ###############################
#
# lookup_in_json w
#
# This method looks into the json
# and finds the uid and update's
# the fb_user and replaces the
# the fb_id and insert's its
# ################################
def lookup_in_json w
# select the json friends and get the json from the avatar dump logic
result = @@client.query("SELECT json_dump, avatar_id FROM crawler.fb_json_friends", :async => true)
# loop into the results
result.each do |row|
# gets the full html of the json
html = row["json_dump"]
# gets the avatar id
vanity = row["avatar_id"]
# Exception handling
begin
# gets the index inside the html
uid_index = html.index(w)
# the id has 9 numbers so let's do the math
uid_index = uid_index + 4 ;
# the index cuts and slides the string
uid_index = html.slice(uid_index..(uid_index+ 9 ))
# update the fb_people table and updates the uid
@@client.query("update fb_people set fb_id='" + uid_index + "' where fb_user='" + vanity + "' ", :async => true)
# let the client know that the process was a success
puts "uid updated"
rescue
# no index found on the uid
puts "sorry no index found or uid on the Html or Json"
end
end
end
# ###############################
#
# start username, password
#
# This method takes the fb_people
# and finds the fb_user and gets
# the avatar to implant into the
# the login method and persist the
# session and change the website
# ################################
def start username, password
# select the fb_people table and get the all table
result = @@client.query("SELECT * FROM crawler.fb_people", :async => true)
# loop the results
result.each do |row|
# vanity interpretation of te fb_user
vanity = row["fb_user"]
# Exception Handling
begin
# Waituntil the process is finished
WaitUtil.wait_for_condition("my_event to happen", :timeout_sec => 100, :delay_sec => 2.5, :verbose => true) do
# go to the vanity page
login_fb  username,password, vanity
end
# Catch for the Exception Handling
rescue Exception => e
# puts the message
puts e.message
# backtrace and ispect
#puts e.backtrace.inspect
end
end
# scrapper for the look up on the json property
FbScrapper.lookup_in_json 'uid'
end
# ###############################
#
# avatar_iterator
#
# This method takes the avatar
# table and reads it complete.
# sends it to the start method
# and loops on the vanity so we
# get the full db of users from table.
# ################################
def avatar_iterator
# select the fb_people table and get the all table
result = @@client.query("SELECT * FROM crawler.avatar", :async => true)
# loop the results
result.each do |row|
# vanity interpretation of te fb_user
username = row["usuario"]
password = row["contrasenia"]
# Exception Handling
begin
# Waituntil the process is finished
WaitUtil.wait_for_condition("my_event to happen", :timeout_sec => 100, :delay_sec => 2.5, :verbose => true) do
# go to the vanity page
start username , password
end
# Catch for the Exception Handling
rescue Exception => e
# puts the message
puts e.message
# backtrace and ispect
#puts e.backtrace.inspect
end
end
# scrapper for the look up on the json property
FbScrapper.lookup_in_json 'uid'
end
# for the parent module
extend self
end
# ###############################
#
# Main for the Script
#
# This will accept several inputs
# and we will name them commands.
#
# ################################
if __FILE__ == $0
# case option for the command
# send from the console
case command = ARGV.shift
# case option
when 'start'
pp "

_____ ____  _____ _     _____   ________  _ _____
/  __//  _ \/  __// \   /  __/  /  __/\  \///  __/
|  \  | / \|| |  _| |   |  \    |  \   \  / |  \
|  /_ | |-||| |_//| |_/\|  /_   |  /_  / /  |  /_
\____\\_/ \|\____\\____/\____\  \____\/_/   \____\


"
puts "version 1.1".red
# this uses a single user
puts "Saudi Single Processing Scrapper ...... running".green
# vanity reader to start the process
FbScrapper.start  "walterarias178@gmail.com", "arias178"
# social scrapper running
puts "Done.".green
when 'avatar_iterator'
pp
"

_____ ____  _____ _     _____   ________  _ _____
/  __//  _ \/  __// \   /  __/  /  __/\  \///  __/
|  \  | / \|| |  _| |   |  \    |  \   \  / |  \
|  /_ | |-||| |_//| |_/\|  /_   |  /_  / /  |  /_
\____\\_/ \|\____\\____/\____\  \____\/_/   \____\


"
puts "version 1.0".red
# this maps the full database
puts "Saudi Processing Scrapper ...... running".green
# vanity reader to start the process
FbScrapper.avatar_iterator
# social scrapper running
puts "Done.".green
else
pp "

_____ ____  _____ _     _____   ________  _ _____
/  __//  _ \/  __// \   /  __/  /  __/\  \///  __/
|  \  | / \|| |  _| |   |  \    |  \   \  / |  \
|  /_ | |-||| |_//| |_/\|  /_   |  /_  / /  |  /_
\____\\_/ \|\____\\____/\____\  \____\/_/   \____\


"
puts "version 1.0".red
# social scrapper ready
puts "Eagleeye Saudi Scrapper, USAGE <start> : for single user , <avatar_iterator> : for full database iteration".green
  end
  end